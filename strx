#!/usr/bin/python
import sys
import os
import signal
import select
from datetime import datetime
from core.filelocal import FileLocal
from core.command import Command
from core.banner.asciiart import AsciiBanner
from core.style_cli import StyleCli, RichArgumentParser, RawDescriptionHelpFormatter
from core.thread_process import ThreadProcess

__author__ = "Cleiton Pinheiro aka MrCl0wn"
__maintainer__ = "Cleiton Pinheiro aka MrCl0wn"
__credits__ = ["Cleiton Pinheiro"]
__license__ = "MIT"
__version__ = "0.1"
__email__ = "mrcl0wnlab[@]gmail.com"
__twitter__ = "https://twitter.com/MrCl0wnLab"
__git__ = [
    "https://github.com/MrCl0wnLab",
    "https://github.com/osintbrazuca"
]


# TODO:
# - def exec_command 
#   - Efetuar mais testes com shlex
#   - Efetuar mais mudança de Popen para run
#   - Analisar uso de '>' redirect para arquivos
# - Argumentos
#   - Criar módulo para parser.add_argument
#   - Validação para comando -skip
#   - Função para pausar e continuar processo
# - Segunda LIST de string
#   - Cria fluxo para coletar uma segunda lista de string
#       tal lista será usada em modelo fuzz dentro do -st / str
# - Módulos
#   - Criar gerenciamento que recebe arquivo (lista) com diversos comandos 
#   - Criar estrutura para receber módulos da comunidade
#   - Gerenciamento de banners
#   - Parser para templates de comando yaml
#   - Check de updates usando git
#   - Módulos de conexão para receber e enviar dados
#       Ex: Mysql, Telegram, Splunk, Elastic 
#   - Gereniamento de loop e delay
#   - Funções de manipulação:
#       Ex: md5(str), hex(str), replace(str,str)

def signal_handler(signal, frame):
    CONFIG_CLI.console.log(" [!] Saindo...")
    sys.exit(0)


def stdin_get_list() -> list:
    """
        ref:
            https://stackoverflow.com/a/3763257
    """
    try:
        if select.select([sys.stdin], [], [], 0.0)[0]:
            stdin_list = sys.stdin.readlines()
            if stdin_list:
                return stdin_list
        else:
            return None
        return None
    except KeyboardInterrupt:
        CONFIG_CLI.console.print_exception(max_frames=3)
    except NameError:
        CONFIG_CLI.console.print_exception(max_frames=3)
    except IOError:
        CONFIG_CLI.console.print_exception(max_frames=3)


def open_file(filename: str) -> list[str]:
    if filename:
        try:
            txt_line, _ = CONFIG_FILE.open_file(filename, 'r')
            if txt_line:
                return txt_line
        except Exception:
            pass


def main(target_str_list: list, template_str: str) -> None:
    if target_str_list and template_str:
        try:
            if list is type(target_str_list):
                try:
                    CONFIG_THREAD.exec_thread(
                        function_name=CONFIG_COMMAND.command_template,
                        command_str=template_str,
                        target_list=target_str_list,
                        argparse=ARGS,
                    )
                except Exception:
                    CONFIG_CLI.console.print_exception(max_frames=3)
        except BrokenPipeError:
            CONFIG_CLI.console.print_exception(max_frames=3)


if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)
    CONFIG_CLI = StyleCli()
    CONFIG_FILE = FileLocal()
    CONFIG_TIME = datetime.now().strftime("%d-%m-%Y-%H")
    CONFIG_THREAD = ThreadProcess()
    CONFIG_BANNER = AsciiBanner()
    CONFIG_THREAD_MAX = 10
    CONFIG_FILE_OUTPUT = f'output-{CONFIG_TIME}.txt'

    try:
        parser = RichArgumentParser(
            prog="strx",
            formatter_class=lambda prog: RawDescriptionHelpFormatter(
                prog, max_help_position=60,
                indent_increment=13),
            description=CONFIG_BANNER.show('strx'),
        )
        parser.add_argument('-list', '-l', metavar="file", help="Arquivo com strings para execução",
                            default=stdin_get_list())
        parser.add_argument('-str', '-st', metavar="cmd", help="String template de comando", default=None,
                            required=True)
        parser.add_argument('-out', '-o', metavar="file", help="Arquivo output de valores da execução shell",
                            default=CONFIG_FILE_OUTPUT)
        parser.add_argument('-pipe', '-p', metavar="cmd", help="Comando que será executado depois de um pipe |",
                            default=None)
        parser.add_argument('-verbose', '-v', help="Modo verboso", action='store_true', default=False)
        parser.add_argument('-thread', '-t', metavar=f"<{CONFIG_THREAD_MAX}>", help="Quantidade de threads",
                            default=CONFIG_THREAD_MAX)
        parser.add_argument('-pf', help="Mostrar resultados da execução de função", action='store_true', default=False)
        parser.add_argument('-of', help="Habilitar output de valores da execução de função", action='store_true',
                            default=False)
        parser.add_argument('-ifvalue', '-if', metavar="value", help="Valor para filtro strings de execução",
                            default=None, required=False)

        ARGS = parser.parse_args()
        CONFIG_COMMAND = Command(file_output=ARGS.out)

        if ARGS.thread:
            CONFIG_THREAD.max_thread = int(ARGS.thread)

        if ARGS.list:
            target_list = open_file(ARGS.list) if os.path.isfile(str(ARGS.list)) else ARGS.list
            CONFIG_COMMAND.verbose = ARGS.verbose
        else:
            CONFIG_CLI.console.print(f"{CONFIG_BANNER.show_random()}\n")
            exit(parser.parse_args('-h'))

        main(
            target_str_list=target_list,
            template_str=ARGS.str
        )
    except KeyboardInterrupt:
        pass
    except SystemError:
        CONFIG_CLI.console.print_exception(max_frames=3)
    except ModuleNotFoundError:
        CONFIG_CLI.console.print_exception(max_frames=3)