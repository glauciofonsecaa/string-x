#!/usr/bin/python
import sys
import os
import logging
import select
from datetime import datetime
from core.filelocal import FileLocal
from core.command import Command
from core.banner.asciiart import AsciiBanner
from core.style_cli import StyleCli, RichArgumentParser, RawDescriptionHelpFormatter
from core.thread_process import ThreadProcess

__author__ = "Cleiton Pinheiro aka MrCl0wn"
__maintainer__ = "Cleiton Pinheiro aka MrCl0wn"
__credits__ = ["Cleiton Pinheiro"]
__license__ = "MIT"
__version__ = "0.1"
__email__ = "mrcl0wnlab[@]gmail.com"
__twitter__ = "https://twitter.com/MrCl0wnLab"
__git__ = [
    "https://github.com/MrCl0wnLab",
    "https://github.com/osintbrazuca"
]


# TODO:
# - def exec_command 
#   - Efetuar mais testes com shlex
#   - Efetuar mais mudança de Popen para run
#   - Analisar uso de '>' redirect para arquivos
# - Argumentos
#   - Criar módulo para parser.add_argument
#   - Validação para comando -skip
#   - Função para pausar e continuar processo
# - Segunda LIST de string
#   - Cria fluxo para coletar uma segunda lista de string
#       tal lista será usada em modelo fuzz dentro do -st / str
# - Módulos
#   - Criar gerenciamento que recebe arquivo (lista) com diversos comandos 
#   - Criar estrutura para receber módulos da comunidade
#   - Gerenciamento de banners
#   - Parser para templates de comando yaml
#   - Check de updates usando git
#   - Módulos de conexão para receber e enviar dados
#       Ex: Mysql, Telegram, Splunk, Elastic 
#   - Gereniamento de loop e delay
#   - Funções de manipulação:
#       Ex: md5(str), hex(str), replace(str,str)


def stdin_get_list() -> list:
    """
        ref:
            https://stackoverflow.com/a/3763257
    """
    try:
        if select.select([sys.stdin], [], [], 0.0)[0]:
            stdin_list = sys.stdin.readlines()
            if stdin_list:
                return stdin_list
        else:
            return None
        return None
    except KeyboardInterrupt:
        CONFIG_CLI.console.print_exception(max_frames=3)
    except NameError:
        CONFIG_CLI.console.print_exception(max_frames=3)
    except IOError:
        CONFIG_CLI.console.print_exception(max_frames=3)


def open_file(filename: str) -> list[str]:
    if filename:
        txt_line, _ = CONFIG_FILE.open_file(filename, 'r')
        if txt_line:
            return txt_line


def main(target_str_list: list, template_str: str) -> None:
    if target_str_list and template_str:
        try:
            if list is type(target_str_list):
                try:
                    CONFIG_THREAD.exec_thread(
                        _function_name=CONFIG_COMMAND.command_template,
                        _command_str=template_str,
                        _target_list=target_str_list,
                        _mix=None,
                    )
                except Exception:
                    CONFIG_CLI.console.print_exception(max_frames=3)
        except BrokenPipeError:
            CONFIG_CLI.console.print_exception(max_frames=3)


if __name__ == '__main__':
    CONFIG_FILE = FileLocal()
    CONFIG_CLI = StyleCli()
    CONFIG_THREAD = ThreadProcess()
    CONFIG_THREAD_MAX = 50
    CONFIG_TIME = datetime.now().strftime("%d-%m-%Y-%H")
    CONFIG_COMMAND = Command()
    CONFIG_BANNER = AsciiBanner()

    try:
        parser = RichArgumentParser(
            prog="strx",
            formatter_class=lambda prog: RawDescriptionHelpFormatter(
                prog, max_help_position=60,
                indent_increment=13),
                description=CONFIG_BANNER.show('strx'),
        )
        parser.add_argument('-list', '-l', metavar="file", help="Arquivo com strings para execução", default=stdin_get_list())
        parser.add_argument('-str', '-st', metavar="cmd", help="String template de command shell", default=None, required=True)
        parser.add_argument('-out', '-o', metavar="file", help="Arquivo onde será salvo os valores", default=f'output-{CONFIG_TIME}.txt')
        parser.add_argument('-skip', '-s', metavar="path", help="String que o processo vai pular. Ex: -s string ou --skip string")
        parser.add_argument('-pipe', '-p', metavar="cmd", help="Comando para executar depois de um pipe |")
        parser.add_argument('-verbose', '-v', help="Modo verboso", action='store_true',  default=False)
        parser.add_argument('-thread', '-t', metavar="<50>", help="Quantidade de threads", default=CONFIG_THREAD_MAX)

        ARGS = parser.parse_args()
   
        if ARGS.thread:
            CONFIG_THREAD.max_thread = int(ARGS.thread)

        if ARGS.list:
            target_list = open_file(ARGS.list) if os.path.isfile(str(ARGS.list)) else ARGS.list
            CONFIG_COMMAND.verbose = ARGS.verbose
            CONFIG_COMMAND.pipe = ARGS.pipe
        else:
            CONFIG_CLI.console.print(f' strx: error: the following arguments are required: -l/--list')
            CONFIG_CLI.console.print(f' strx: use pipes: cat list.txt | main.py -str ../testes/\n')
            exit(parser.parse_args('-h'))

        logging.basicConfig(
            level="NOTSET",
            filename=str(ARGS.out),
            filemode='a',
            format='%(message)s',
            datefmt='%H:%M:%S',
        )
        logging.getLogger()

        try:
            main(
                target_str_list=target_list,
                template_str=ARGS.str
            )
        except KeyboardInterrupt:
            pass
    except SystemError:
        CONFIG_CLI.console.print_exception(max_frames=3)
    except ModuleNotFoundError:
        CONFIG_CLI.console.print_exception(max_frames=3)